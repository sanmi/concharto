<?xml version="1.0"?>

<project name="tsm" basedir=".">

	<import file="macros-and-presets.xml" />
	<property file="build.properties" />

	<property name="name" value="${ant.project.name}" />

	<property name="webroot.dir" value="src/main/webapp" />
	<property name="webroot.webinf.dir" value="${webroot.dir}/WEB-INF" />
	<property name="db.ddl.dir" value="${webroot.webinf.dir}" />

	<property name="src.dir" value="src/main/java" />
	<property name="src.test.dir" value="src/test/java" />
	<property name="src.test.conf.dir" value="src/test/conf" />

	<property name="target.dir" value="target" />
	<property name="target.classes.dir" value="${target.dir}/classes" />
	<property name="target.test.classes.dir" value="${target.dir}/test-classes" />
	<property name="target.test.reports.dir" value="${target.dir}/test-reports" />
	<property name="target.webapp.dir" value="${target.dir}/${name}" />
	<property name="target.db.ddl.dir" value="${target.dir}/ddl" />

	<property name="lib.webroot.dir" value="${webroot.dir}/WEB-INF/lib" />
	<property name="lib.build.dir" value="lib/build" />
	<property name="lib.tools.dir" value="lib/tools" />
	<property name="lib.local.dir" value="lib/local" />

	<property file="${user.home}/.m2/maven.properties" />
	<property name="maven.repo.local" value="${user.home}/.m2/repository" />

	<!-- Begin Classpaths -->
	<!-- TODO unfortunately jars need to be defined in three places: .classpath, pom.xml and build.xml -->
	<fileset id="external-jars" dir="${maven.repo.local}">
		<include name="antlr/antlr/2.7.6/antlr-2.7.6.jar" />
		<include name="javax/servlet/jstl/1.1.2/jstl-1.1.2.jar" />
		<include name="c3p0/c3p0/0.9.1.1/c3p0-0.9.1.1.jar" />
		<include name="mysql/mysql-connector-java/5.0.5/mysql-connector-java-5.0.5.jar" />
		<include name="asm/asm/1.5.3/asm-1.5.3.jar" />
		<include name="taglibs/standard/1.1.2/standard-1.1.2.jar" />
		<include name="javax/persistence/persistence-api/1.0/persistence-api-1.0.jar" />
		<include name="org/hibernate/hibernate-annotations/3.3.0.ga/hibernate-annotations-3.3.0.ga.jar" />
		<include name="org/hibernate/hibernate-commons-annotations/3.3.0.ga/hibernate-commons-annotations-3.3.0.ga.jar" />
		<include name="commons-logging/commons-logging/1.1/commons-logging-1.1.jar" />
		<include name="javax/transaction/jta/1.0.1B/jta-1.0.1B.jar" />
		<include name="commons-dbcp/commons-dbcp/1.2.2/commons-dbcp-1.2.2.jar" />
		<include name="dom4j/dom4j/1.6.1/dom4j-1.6.1.jar" />
		<include name="cglib/cglib/2.1_3/cglib-2.1_3.jar" />
		<include name="asm/asm-attrs/1.5.3/asm-attrs-1.5.3.jar" />
		<include name="commons-collections/commons-collections/2.1.1/commons-collections-2.1.1.jar" />
		<include name="org/hibernate/hibernate/3.2.5.ga/hibernate-3.2.5.ga.jar" />
		<include name="net/sf/ehcache/ehcache/1.2.4/ehcache-1.2.4.jar" />
		<include name="org/springframework/spring/2.0.6/spring-2.0.6.jar" />
		<include name="log4j/log4j/1.2.14/log4j-1.2.14.jar" />
		<include name="commons-pool/commons-pool/1.3/commons-pool-1.3.jar" />
	</fileset>

	<path id="master-classpath">
		<fileset refid="external-jars" />
		<fileset dir="${lib.build.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="tools-classpath">
		<pathelement path="${target.classes.dir}" />
		<fileset dir="${lib.tools.dir}">
			<include name="**/*.jar" />
		</fileset>
		<path refid="master-classpath" />
		<path path="${runtime-classpath}" />
	</path>

	<path id="test-classpath">
		<pathelement path="${target.classes.dir}" />
		<pathelement path="${target.test.classes.dir}" />
		<pathelement path="${src.test.conf.dir}" />
		<pathelement path="${webroot.webinf.dir}" />
		<fileset dir="${lib.build.dir}">
			<include name="**/*.jar" />
		</fileset>
		<path refid="master-classpath" />
	</path>
	<!-- End Classpaths -->


	<!-- Begin Tools -->
	<taskdef name="hibernatetool" classname="org.hibernate.tool.ant.HibernateToolTask" classpathref="tools-classpath" />

	<target name="gen-schema" depends="compile">
		<mkdir dir="${target.db.ddl.dir}" />
		<hibernatetool destdir="${target.db.ddl.dir}">
			<annotationconfiguration configurationfile="${db.ddl.dir}/hibernate.cfg.xml" />
			<hbm2ddl export="false" outputfilename="create-tables.sql" drop="true" format="true" haltonerror="true" />
		</hibernatetool>
	</target>

	<!-- 
	TODO: There seems to be some sort of timing problem here.  If you type
	"ant gen-schema" you sometimes get an error: "Unable to load class declared as"
	but if you repeat, it will work the second time
	-->
	<target name="create-db-test" depends="gen-schema">
		<mkdir dir="${target.db.ddl.dir}" />
		<run-db-script dbuserid="${test.db.username}" dbpassword="${test.db.password}" scriptdir="${target.db.ddl.dir}" scriptname="create-tables.sql" outputdir="${target.db.ddl.dir}" />
	</target>
	<!-- Begin Tools -->

	<target name="clean" description="Clean output dirs (build, weblib, dist)">
		<delete dir="${target.dir}" />
	</target>

	<target name="setup">
		<mkdir dir="${target.dir}" />
		<mkdir dir="${target.classes.dir}" />
		<mkdir dir="${target.test.classes.dir}" />
		<mkdir dir="${target.test.reports.dir}" />
	</target>

	<target name="compile" depends="setup">
		<javac destdir="${target.classes.dir}" debug="true" failonerror="true">
			<src path="${src.dir}" />
			<classpath refid="master-classpath" />
		</javac>
	</target>

	<target name="compile-tests" depends="compile, setup">
		<javac destdir="${target.test.classes.dir}" debug="true" failonerror="true">
			<src path="${src.test.dir}" />
			<classpath refid="test-classpath" />
		</javac>
	</target>

	<target name="integration-test" depends="compile-tests">
		<junit>
			<!-- Default Formatter - brain-dead text file with almost no information, only prints failures and errors -->
			<formatter type="brief" usefile="true" unless="junit.formatter.plain" />
			<classpath refid="test-classpath" />

			<batchtest todir="${target.test.reports.dir}">
				<fileset dir="${target.test.classes.dir}">
					<include name="**/IntegrationTest*.class" />
					<exclude name="**/*$$*" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="build" depends="compile">

		<copy todir="${target.webapp.dir}" preservelastmodified="true">
			<fileset dir="${webroot.dir}">
				<exclude name="**/classes/**" />
				<include name="**/*" />
			</fileset>
		</copy>
		<copy todir="${target.webapp.dir}/WEB-INF/classes" preservelastmodified="true">
			<fileset dir="${target.classes.dir}">
				<include name="**/*" />
			</fileset>
		</copy>

	</target>

	<target name="warfile" depends="build" description="Build the web application archive">

		<mkdir dir="${target.dir}" />

		<war warfile="${target.dir}/${name}.war" basedir="${target.webapp.dir}" webxml="${target.webapp.dir}/WEB-INF/web.xml">
			<include name="*" />
			<include name="docs/**" />
			<include name="html/**" />
			<include name="WEB-INF/*.*" />
			<include name="WEB-INF/css/*.css" />
			<include name="WEB-INF/tld/*.tld" />
			<exclude name="WEB-INF/web.xml" />
			<include name="WEB-INF/classes/*.*" />
			<include name="WEB-INF/lib/**" />
			<include name="WEB-INF/jsp/**" />
			<exclude name="**/.*" />
		</war>
	</target>

	<target name="dist" depends="warfile">
		<!--
          Delegate to warfile target by depending on it. dist is just to offer
          a generic target name across all Spring sample apps that may be used
          for autobuilds testing.
        -->
	</target>


	<target name="all" depends="clean,build,integration-test,warfile" description="Clean,build,warfile" />

</project>
