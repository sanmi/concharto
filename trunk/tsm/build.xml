<?xml version="1.0"?>

<project name="tsm" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant">

	<import file="macros-and-presets.xml" />
	<property file="build.properties" />

	<property name="name" value="${ant.project.name}" />

	<property name="webroot.dir" value="src/main/webapp" />
	<property name="webroot.webinf.dir" value="${webroot.dir}/WEB-INF" />
	<property name="db.ddl.dir" value="${webroot.webinf.dir}" />
	<property name="db.additional.ddl.dir" value="database" />

	<property name="src.dir" value="src/main/java" />
	<property name="src.test.dir" value="src/test/java" />
	<property name="src.lab.dir" value="src/lab/java" />
	<property name="src.test.conf.dir" value="src/test/conf" />

	<property name="target.dir" value="target" />
	<property name="target.classes.dir" value="${target.dir}/classes" />
	<property name="target.test.classes.dir"
		value="${target.dir}/test-classes" />
	<property name="target.lab.classes.dir"
		value="${target.test.classes.dir}" />
	<property name="target.test.reports.dir"
		value="${target.dir}/test-reports" />
	<property name="target.webapp.dir" value="${target.dir}/${name}" />
	<property name="target.db.ddl.dir" value="${target.dir}/ddl" />

	<property name="lib.webroot.dir" value="${webroot.dir}/WEB-INF/lib" />
	<property name="lib.build.dir" value="lib/build" />
	<property name="lib.tools.dir" value="lib/tools" />
	<property name="lib.local.dir" value="lib/local" />
	<property name="lib.lab.dir" value="lib/lab" />
	<property name="lib.deploy.dir" value="lib/deploy" />


	<!-- Begin Classpaths -->
	<path id="master-classpath">
		<fileset dir="${lib.build.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${lib.local.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="tools-classpath">
		<pathelement path="${target.classes.dir}" />
		<path refid="master-classpath" />
		<fileset dir="${lib.tools.dir}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="test-classpath">
		<pathelement path="${target.classes.dir}" />
		<pathelement path="${target.test.classes.dir}" />
		<pathelement path="${src.test.conf.dir}" />
		<pathelement path="${webroot.webinf.dir}" />
		<fileset dir="${lib.build.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${lib.local.dir}">
			<include name="**/*.jar" />
		</fileset>
		<fileset dir="${lib.lab.dir}">
			<include name="**/*.jar" />
		</fileset>
		<path refid="master-classpath" />
	</path>
	<!-- End Classpaths -->

	<!-- Begin Tools -->
	<target name="gen-schema" depends="compile">
		<taskdef name="hibernatetool"
			classname="org.hibernate.tool.ant.HibernateToolTask"
			classpathref="tools-classpath" />
		<mkdir dir="${target.db.ddl.dir}" />
		<hibernatetool destdir="${target.db.ddl.dir}">
			<annotationconfiguration
				configurationfile="${db.ddl.dir}/hibernate.cfg.xml" />
			<hbm2ddl export="false" outputfilename="create-tables.sql"
				drop="true" format="true" haltonerror="true" />
		</hibernatetool>
	</target>

	<!-- 
		TODO: There seems to be some sort of timing problem here.  If you type
		"ant gen-schema" you sometimes get an error: "Unable to load class declared as"
		but if you repeat, it will work the second time
	-->
	<target name="create-db-test" depends="gen-schema">
		<mkdir dir="${target.db.ddl.dir}" />
		<run-db-script dbuserid="${test.db.username}"
			dbpassword="${test.db.password}" scriptdir="${target.db.ddl.dir}"
			scriptname="create-tables.sql" outputdir="${target.db.ddl.dir}" />

		<run-db-script dbuserid="${test.db.username}"
			dbpassword="${test.db.password}" scriptdir="${db.additional.ddl.dir}"
			scriptname="post-gen.sql" outputdir="${target.db.ddl.dir}" />
	</target>
	<!-- End Tools -->

	<!-- Begin Ivy -->
	<target name="resolve"
		description="--> retreive dependencies with ivy">
		<ivy:retrieve pattern="${ivy.lib.dir}/[conf]/[artifact].[ext]" />
	</target>
	<!-- End Ivy -->

	<!-- Begin Build Targets -->
	<target name="clean"
		description="Clean output dirs (build, weblib, dist)">
		<delete dir="${target.dir}" />
		<delete dir="${lib.build.dir}" />
		<delete dir="${lib.deploy.dir}" />
		<delete dir="${webroot.webinf.dir}/classes/"
			includeemptydirs="true" />

		<antcall target="resolve"></antcall>
	</target>

	<target name="setup">
		<mkdir dir="${target.dir}" />
		<mkdir dir="${target.classes.dir}" />
		<mkdir dir="${target.test.classes.dir}" />
		<mkdir dir="${target.test.reports.dir}" />
	</target>

	<target name="compile" depends="setup">
		<javac destdir="${target.classes.dir}" debug="true"
			failonerror="true">
			<src path="${src.dir}" />
			<classpath refid="master-classpath" />
		</javac>
	</target>

	<target name="compile-tests" depends="compile, setup">
		<javac destdir="${target.test.classes.dir}" debug="true"
			failonerror="true">
			<src path="${src.test.dir}" />
			<src path="${src.lab.dir}" />
			<classpath refid="test-classpath" />
		</javac>
	</target>

	<target name="integration-test" depends="compile-tests">
		<junit>
			<!-- Default Formatter - brain-dead text file with almost no information, only prints failures and errors -->
			<formatter type="brief" usefile="true"
				unless="junit.formatter.plain" />
			<classpath refid="test-classpath" />

			<batchtest todir="${target.test.reports.dir}" fork="no">
				<fileset dir="${target.test.classes.dir}">
					<include name="**/IntegrationTest*.class" />
					<exclude name="**/*$$*" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="build" depends="compile">

		<copy todir="${target.webapp.dir}"
			preservelastmodified="true">
			<fileset dir="${webroot.dir}">
				<exclude name="**/classes/**" />
				<include name="**/*" />
			</fileset>
		</copy>
		<copy todir="${target.webapp.dir}/WEB-INF/classes"
			preservelastmodified="true">
			<fileset dir="${target.classes.dir}">
				<include name="**/*" />
			</fileset>
		</copy>

	</target>

	<target name="warfile" depends="build"
		description="Build the web application archive">

		<mkdir dir="${target.dir}" />

		<war warfile="${target.dir}/${name}.war"
			basedir="${target.webapp.dir}"
			webxml="${target.webapp.dir}/WEB-INF/web.xml">
			<include name="*" />
			<include name="docs/**" />
			<include name="html/**" />
			<include name="WEB-INF/*.*" />
			<include name="WEB-INF/css/*.css" />
			<include name="WEB-INF/tld/*.tld" />
			<exclude name="WEB-INF/web.xml" />
			<include name="WEB-INF/classes/*.*" />
			<include name="WEB-INF/lib/**" />
			<include name="WEB-INF/jsp/**" />
			<exclude name="**/.*" />
		</war>
	</target>

	<target name="dist" depends="warfile">
		<!--
			Delegate to warfile target by depending on it. dist is just to offer
			a generic target name across all Spring sample apps that may be used
			for autobuilds testing.
		-->
	</target>


	<target name="all" depends="clean,build,integration-test,warfile"
		description="Clean,build,warfile" />

	<!-- End Build Targets -->

</project>
