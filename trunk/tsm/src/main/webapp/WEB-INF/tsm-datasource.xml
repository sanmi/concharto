<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright 2009 Time Space Map, LLC
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
    http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd">

	<!-- Begin Hibernate Sessions -->  
	<!-- Change this to a poolable connection or possibly use C3PO -->
	<bean id="myDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
	  <property name="driverClassName" value="${db.driver}"/>
	  <property name="url" value="${db.url.base}/tsm_${app_environment}"/>
	  <property name="username" value="tsm_${app_environment}_user"/>
	  <property name="password" value="tsm_${app_environment}_user"/>

	  <property name="maxActive" value="10"/>

    <!-- You don't want too many idle connections hanging around
         if you can avoid it, only enough to soak up a spike in
         the load -->
	  <property name="maxIdle" value="5"/>

    <!-- Don't use autoReconnect=true, it's going away eventually
         and it's a crutch for older connection pools that couldn't
         test connections. You need to decide whether your application
         is supposed to deal with SQLExceptions (hint, it should), and
         how much of a performance penalty you're willing to pay
         to ensure 'freshness' of the connection -->
	  <property name="validationQuery" value="SELECT 1"/>

   <!-- The most conservative approach is to test connections
        before they're given to your application. For most applications
        this is okay, the query used above is very small and takes
        no real server resources to process, other than the time used
        to traverse the network.

        If you have a high-load application you'll need to rely on
        something else. -->
	  <property name="testOnBorrow" value="true"/>

   <!-- Otherwise, or in addition to testOnBorrow, you can test
        while connections are sitting idle -->
	  <property name="testWhileIdle" value="true"/>

    <!-- You have to set this value, otherwise even though
         you've asked connections to be tested while idle,
         the idle evicter thread will never run -->
	  <property name="timeBetweenEvictionRunsMillis" value="10000"/>

    <!-- Don't allow connections to hang out idle too long,
         never longer than what wait_timeout is set to on the
         server...A few minutes or even fraction of a minute
         is sometimes okay here, it depends on your application
         and how much spikey load it will see -->
	  <property name="minEvictableIdleTimeMillis" value="60000"/>

	</bean>

	<bean id="mySessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
  	    <property name="dataSource" ref="myDataSource"/>
		<property name="hibernateProperties">
		    <props>
		        <prop key="hibernate.jdbc.batch_size">0</prop>
		        <prop key="hibernate.connection.pool_size">0</prop><!--
		        <prop key="hibernate.hbm2ddl.auto">validate</prop>
		        --><prop key="hibernate.show_sql">false</prop>
		        <prop key="hibernate.current_session_context_class">thread</prop>
						<prop key="hibernate.transaction.factory_class">org.hibernate.transaction.JDBCTransactionFactory</prop> 
		    </props>
		</property>
		<property name="configLocation">
			<value>WEB-INF/hibernate.cfg.xml</value>
		</property>		
	</bean>
	<!-- End Hibernate Sessions -->  
	
	<!-- Begin Transaction config -->
	<bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
	  <property name="sessionFactory" ref="mySessionFactory"/>
	</bean>
	<!-- End Transaction config -->

	
	
</beans>
